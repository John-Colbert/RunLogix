
class DistanceBasedWorkoutClass: ScheduledWorkoutsBase {
  var ListClass<DistanceSegmentClass>  Segments,
                                       SegmentList;
  var ListClass<DistanceIntervalClass> Intervals;

  Constructor(datetime date) {
    super.Constructor(date);
    Segments             = new(8);
    SegmentList          = new(10);
    Intervals            = new(2);
  }

  void AddSegment(string name, double distance, DistanceTypes distanceType, string pace, PaceTypes paceType) {
    double targetPace = Convert.MinutesToDouble(pace);
    DistanceSegmentClass segment = new(name, distance, distanceType, targetPace, paceType);
    segment.AddOrder = AddOrder++;
    Segments.Add(segment);
  }

  DistanceIntervalClass AddInterval(int repeats) {
    var iv = new DistanceIntervalClass(repeats, AddOrder++);
    Intervals.Add(iv);
    return iv;
  }

  override void BuildSegmentList {
    if (Intervals.Length() <= 0) {
      SegmentList = Segments;
      return;
    }

    DistanceSegmentClass s;
    for (int i = 1; i < AddOrder; i++) {
      s = Segments.FindFirst(d => d.AddOrder == i);
      if (s is not null)
        SegmentList.Add(s);
      else {
        DistanceIntervalClass iv = Intervals.FindFirst(d => d.AddOrder == i);
        if (iv is not null) {
          DistanceSegmentClass[] segments = iv.Segments.ToArray * iv.Repeats;
          foreach (var segment in segments)
            SegmentList.Add(new DistanceSegmentClass(segment.Name, segment.TargetDistance, segment.TargetDistanceType, segment.TargetPace, segment.TargetPaceType));
        }
      }
    }

    SegmentList.Add(new DistanceSegmentClass("Open", 0, Measures.DistanceType, 12.00, PaceTypes.MinPerMi));
  }

  override void BuildSegments {
    int i = 0;

    var readings = Accumulator.Readings;

    foreach (var segment in SegmentList) {
      if (readings.Length > 0) {
        StartTime = readings.FirstElement.Time;
        EndTime   = readings.LastElement.Time;

        var distanceMeters = 0.0;
        var targetReadings = segment.TargetTime * 60;
        var numReadings    = 0;
        while (i < readings.Length && numReadings < targetReadings) {
          distanceMeters += readings[i++].Meters;
          numReadings++;
        }

        if (segment.Name == "Open") {
          segment.TargetTime = numReadings / 60;
          segment.ActualTime = segment.TargetTime;
        }

        if (segment.TargetTime > 0) {
          segment.ActualDistance = distanceMeters * Measures.PerMeterFactor;

          if (segment.ActualDistance > 0) {
            segment.ActualTime     = numReadings / 60;
            segment.ActualPace     = segment.ActualTime / segment.ActualDistance;
            segment.Performance    = segment.ActualPace - segment.ConvertedTargetPace;
            if (segment.Name == "Open") {
              segment.ConvertedTargetPace = segment.ActualPace;
              segment.Performance = 0;
            }
          }
        }

        TotalActualDistance += segment.ActualDistance;
      }

      if (segment.Name != "Open") {
        segment.TargetTime = (segment.TargetDistance * segment.ConvertedTargetPace);
        TotalTargetTime        += segment.TargetTime;
        TotalTargetDistance    += segment.TargetDistance;
      }

      if ((segment.Name == "Open" && segment.ActualTime > 0) || segment.Name != "Open")
        TotalActualTime += segment.ActualTime;
    }

    TotalTargetPace  = TotalTargetTime / TotalTargetDistance;
    TotalActualPace  = TotalActualDistance > 0 ? TotalActualTime / TotalActualDistance : 0;
    TotalPerformance = TotalActualPace > 0 ? TotalActualPace - TotalTargetPace : 0;
  }
}
//===========================================================================

class DistanceBasedWorkoutsClass {
  var ListClass<DistanceBasedWorkoutClass> Workouts;

  Constructor {
    Workouts = new(8);
  }

  Build = {
    foreach(var run in DistanceBasedRuns){
      run.Build();
      Workouts.Add(run);
    }
  };
}
