using Format, Units, IO, System;

class WorkoutBase {
  var AccumulatorClass Accumulator;
  var string           Filename;
  var datetime         StartTime,
                       EndTime;
  var bool             UseSourceRoot;

  Constructor {
    Accumulator   = new;
    Filename      = null;
    UseSourceRoot = false;
  }

  void GetFilePath(datetime workoutDate) {
    UseSourceRoot = Filename is not null;

    if (!UseSourceRoot) {
      string namePrefix = "route_{0}_"(GetWorkoutDateName(workoutDate));

      foreach(var file in Files) {
        if (file.FileName.StartsWith(namePrefix)) {
          Filename = file.FileName;
          break;
        }
      }
    }
  }

  private string GetWorkoutDateName(datetime workoutDate) {
    string year  = workoutDate.Year;
    string month = workoutDate.Month;
    string day   = workoutDate.Day;

    if (month.Length == 1)
      month = "0{0}"(month);

    if (day.Length == 1)
      day = "0{0}"(day);

    return "{0}-{1}-{2}"(year, month, day);
  }
}
//==============================================================================

class IntervalClass {
  var ListClass<SegmentClass> Segments;
  var int Repeats;
  var int AddOrder;
  var int Count;

  Constructor(int repeats = 1, int addOrder) {
    Segments = new(2);
    Repeats  = repeats;
    AddOrder = addOrder;
    Count    = 0;
  }

  void AddSegment(string name, double minutes, string pace, PaceTypes paceType) {
    double targetPace = Convert.MinutesToDouble(pace);
    SegmentClass segment = new(name, minutes, targetPace, paceType);
    Segments.Add(segment);
  }
}
//===========================================================================

class SegmentClass {
  var string    Name;
  var PaceTypes TargetPaceType;
  var double    TargetTime,
                ActualTime,
                TargetPace,
                ConvertedTargetPace,
                ActualPace,
                Performance,
                TargetDistance,
                ActualDistance;
  var int       AddOrder;

  Constructor(string name, double time, double targetPace, PaceTypes targetPaceType) {
    Name                = name;
    TargetPaceType      = targetPaceType;
    TargetTime          = time;
    TargetPace          = targetPace;
    ConvertedTargetPace = TargetPace;
    ActualPace          = 0;
    Performance         = 0;
    TargetDistance      = 0;
    AddOrder            = 0;

    if (!TargetPaceMatchesSystem)
      ConvertedTargetPace = Convert.ConvertPace(TargetPace, TargetPaceType);
  }

  bool TargetPaceMatchesSystem {
    var systemPace = UnitSystem == UnitSystems.Metric ? PaceTypes.MinPerKm : PaceTypes.MinPerMi;
    return systemPace == TargetPaceType;
  }
}
//===========================================================================




