using Format, Units, IO, System;

class WorkoutBase {
  var AccumulatorClass Accumulator;
  var string           Filename;
  var datetime         StartTime,
                       EndTime;
  var bool             UseSourceRoot;

  Constructor {
    Accumulator   = new;
    Filename      = null;
    UseSourceRoot = false;
  }

  void GetFilePath(datetime workoutDate) {
    UseSourceRoot = Filename is not null;

    if (!UseSourceRoot) {
      string namePrefix = "route_{0}_"(GetWorkoutDateName(workoutDate));

      foreach(var file in Files) {
        if (file.FileName.StartsWith(namePrefix)) {
          Filename = file.FileName;
          break;
        }
      }
    }
  }

  private string GetWorkoutDateName(datetime workoutDate) {
    string year  = workoutDate.Year;
    string month = workoutDate.Month;
    string day   = workoutDate.Day;

    if (month.Length == 1)
      month = "0{0}"(month);

    if (day.Length == 1)
      day = "0{0}"(day);

    return "{0}-{1}-{2}"(year, month, day);
  }
}
//==============================================================================

abstract class ScheduledWorkoutsBase: WorkoutBase {
  var string                       WorkoutName,
                                   Notes;
  var datetime                     WorkoutDate;
  var double                       TotalTargetTime,
                                   TotalActualTime,
                                   TotalTargetDistance,
                                   TotalActualDistance,
                                   TotalTargetPace,
                                   TotalActualPace,
                                   TotalPerformance;
  var int                          AddOrder;

  Constructor(datetime date) {
    super.Constructor;
    WorkoutName          = null;
    WorkoutDate          = date;
    Notes                = null;
    TotalTargetTime      = 0;
    TotalActualTime      = 0;
    TotalTargetDistance  = 0;
    TotalActualDistance  = 0;
    TotalTargetPace      = 0;
    TotalActualPace      = 0;
    TotalPerformance     = 0;
    AddOrder             = 1;
  }

  //void AddSegment(string name, double minutes, string pace, PaceTypes paceType) {
  //  double targetPace = Convert.MinutesToDouble(pace);
  //  TimeSegmentClass segment = new(name, minutes, targetPace, paceType);
  //  segment.AddOrder = AddOrder++;
  //  Segments.Add(segment);
  //}

  //TimeIntervalClass AddInterval(int repeats) {
  //  var iv = new TimeIntervalClass(repeats, AddOrder++);
  //  Intervals.Add(iv);
  //  return iv;
  //}

  void Build {
    GetFilePath(WorkoutDate);
    if (Filename is not null) {
      var wo = RawWorkouts.Workouts;
      Accumulator = wo?.FindFirst(d => d.Filename == Filename).Accumulator;
    }
    BuildSegmentList();
    BuildSegments();
  }

  abstract void BuildSegmentList;
  abstract void BuildSegments;

  //private void BuildSegmentList {
  //  if (Intervals.Length() <= 0) {
  //    SegmentList = Segments;
  //    return;
  //  }
  //
  //  TimeSegmentClass s;
  //  for (int i = 1; i < AddOrder; i++) {
  //    s = Segments.FindFirst(d => d.AddOrder == i);
  //    if (s is not null)
  //      SegmentList.Add(s);
  //    else {
  //      TimeIntervalClass iv = Intervals.FindFirst(d => d.AddOrder == i);
  //      if (iv is not null) {
  //        TimeSegmentClass[] segments = iv.Segments.ToArray * iv.Repeats;
  //        foreach (var segment in segments) {
  //          SegmentList.Add(new TimeSegmentClass(segment.Name, segment.TargetTime, segment.TargetPace, segment.TargetPaceType));
  //        }
  //      }
  //    }
  //  }
  //  SegmentList.Add(new TimeSegmentClass("Open", 100, 12.00, PaceTypes.MinPerMi));
  //}

  //private void BuildSegments {
  //  int i = 0;
  //
  //  var readings = Accumulator.Readings;
  //
  //  foreach (var segment in SegmentList) {
  //    if (readings.Length > 0) {
  //      StartTime = readings.FirstElement.Time;
  //      EndTime   = readings.LastElement.Time;
  //
  //      var distanceMeters = 0.0;
  //      var targetReadings = segment.TargetTime * 60;
  //      var numReadings    = 0;
  //      while (i < readings.Length && numReadings < targetReadings) {
  //        distanceMeters += readings[i++].Meters;
  //        numReadings++;
  //      }
  //
  //      if (segment.Name == "Open") {
  //        segment.TargetTime = numReadings / 60;
  //        segment.ActualTime = segment.TargetTime;
  //      }
  //
  //      if (segment.TargetTime > 0) {
  //        segment.ActualDistance = distanceMeters * Measures.PerMeterFactor;
  //
  //        if (segment.ActualDistance > 0) {
  //          segment.ActualTime     = numReadings / 60;
  //          segment.ActualPace     = segment.ActualTime / segment.ActualDistance;
  //          segment.Performance    = segment.ActualPace - segment.ConvertedTargetPace;
  //          if (segment.Name == "Open") {
  //            segment.ConvertedTargetPace = segment.ActualPace;
  //            segment.Performance = 0;
  //          }
  //        }
  //      }
  //
  //      TotalActualDistance += segment.ActualDistance;
  //    }
  //
  //    if (segment.Name != "Open") {
  //      segment.TargetDistance = (segment.TargetTime / segment.ConvertedTargetPace);
  //      TotalTargetTime        += segment.TargetTime;
  //      TotalTargetDistance    += segment.TargetDistance;
  //    }
  //
  //    if ((segment.Name == "Open" && segment.ActualTime > 0) || segment.Name != "Open")
  //      TotalActualTime += segment.ActualTime;
  //  }
  //
  //  TotalTargetPace  = TotalTargetTime / TotalTargetDistance;
  //  TotalActualPace  = TotalActualDistance > 0 ? TotalActualTime / TotalActualDistance : 0;
  //  TotalPerformance = TotalActualPace > 0 ? TotalActualPace - TotalTargetPace : 0;
  //}
}
//===========================================================================



class DistancePerformance {
  var DistanceTypes     Type;
  var double            Time,
                        Distance;
  var int               Readings;
  var DoubleList        ElevationReadings;

  Constructor(DistanceTypes type, double time, double distance, int readings, DoubleList elevationReadings) {
    Type     = type;
    Time     = time;
    Distance = distance;
    Readings = readings;
    ElevationReadings = elevationReadings;
  }
}
//===========================================================================

class ElevationClass {
  var double DistanceUp,
             DistanceDown;

  Constructor(double distanceUp, double distanceDown) {
    DistanceUp = distanceUp;
    DistanceDown = distanceDown;
  }
}




