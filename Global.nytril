using Format, Units, IO, System;

//======================================================================================

readonly TimeBasedWorkoutsClass Workouts    = new;
readonly RawWorkoutsClass       RawWorkouts = new;
readonly UnitSystems            UnitSystem  = UnitSystems.Metric;
readonly FileEntryClass[]       Files       = EnumerateFiles(DataPath);

//======================================================================================

namespace Measures {
  const double MetersPerKilometer     = (1 kilometer) intu meters;
  const double KilometersPerMeter     = (1 meter) intu kilometers;
  const double MetersPerMile          = (1 mile) intu meters;
  const double MilesPerMeter          = (1 meter) intu miles;
  const string Kilometer              = "Kilometer";
  const string Mile                   = "Mile";
  const string Kilometers             = "Kilometers";
  const string Miles                  = "Miles";

  readonly string DistanceAbbr        = UnitSystem == UnitSystems.Metric ? " km" : " mi";
  readonly string MinutesPerAbbr      = UnitSystem == UnitSystems.Metric ? " min/km" : " min/mi";
  readonly double PerMeterFactor      = UnitSystem == UnitSystems.Metric ? Measures.KilometersPerMeter : Measures.MilesPerMeter;
  readonly double MetersPerFactor     = UnitSystem == UnitSystem.Metric  ? Measures.MetersPerKilometer : Measures.MetersPerMile;
  readonly DistanceTypes DistanceType = UnitSystem == UnitSystem.Metric ? DistanceTypes.Kilometer : DistanceTypes.Mile;
  readonly string DistanceUnitSingle  = UnitSystem == UnitSystem.Metric ? Kilometer : Mile;
  readonly string DistanceUnitPlural  = UnitSystem == UnitSystem.Metric ? Kilometers : Miles;
}

namespace Convert {
  double MinutesToDouble(string minutes) {
    var parts = minutes.Split(":");
    if (parts.Length != 2)
      Assert(false, "Time must be entered as minutes and seconds, with two digits for each (i.e. \"12:01\" or \"01:15\")");

    int paceMinutes = parts[0] as int;
    int paceSeconds = parts[1] as int;

    return paceMinutes + paceSeconds * 0.016666666667;
  }

  double ConvertPace(double pace, PaceTypes fromType) {
    if (fromType == PaceTypes.MinPerMi)
      return pace * 0.6213692038495188; //to min/km
    else
      return pace * 1.6093491499172796; //to min/mi
  }
}
//======================================================================================

enum PaceTypes {
  MinPerKm ("min/km"),
  MinPerMi ("min/mi")
}

enum DistanceTypes {
  Meters,
  Kilometer,
  Mile
}

enum UnitSystems {
  Metric,
  Imperial
}
//======================================================================================