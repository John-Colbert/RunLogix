using IO, Units, System;

enum DistanceTypes {
  Meters,
  Kilometer,
  Mile
}

class DistancePerformance {
  var DistanceTypes Type;
  var double        Time,
                    Distance;
  var int           Readings;
  Constructor(DistanceTypes type, double time, double distance, int readings) {
    Type     = type;
    Time     = time;
    Distance = distance;
    Readings = readings;
  }
}
//=================================================================================
class RawWorkoutClass: WorkoutBase {
  var ListClass<DistancePerformance> Splits;
  var DistancePerformance            RemainingDistance;
  var double                         TotalDistance,
                                     TotalTime;

  Constructor {
    super.Constructor;
    Splits            = new(2);
    RemainingDistance = new(DistanceTypes.Meters, 0, 0, 0);
    TotalDistance     = 0;
    TotalTime         = 0;
  }

  void Build(FileEntryClass file) {
    ReadFile(file);
    BuildWorkout;
    //Splits = UnitSystem == UnitSystems.Metric ? KilometerSplits : MileSplits;
  }

  double GetTotalMiles {
    return TotalDistance * Measures.MetersPerMile;
  }

  double GetTotalKilometers {
    return TotalDistance * Measures.KilometersPerMeter;
  }

  double GetRemainingMiles {
    return RemainingDistance.Distance * Measures.MetersPerMile;
  }

  double GetRemainingKilometers {
    return RemainingDistance.Distance * Measures.KilometersPerMeter;
  }

  void ReadFile(FileEntryClass file) {
    Filename = file.FileName;
    Accumulator.ReadFile(DataPath, Filename, false);
  }

  void BuildWorkout {
    var readings = Accumulator.Readings;
    if (readings.Length > 0) {
      StartTime = readings.FirstElement.Time;
      EndTime   = readings.LastElement.Time;
    }

    int i = 0;
    int splitReadings = 0;
    while (i < readings.Length) {
      TotalDistance += readings[i++].Meters;
      splitReadings++;

      splitReadings = AddSplit(splitReadings);
    }

    if (splitReadings > 0) {
      var time = splitReadings / 60;
      var distanceFactor = UnitSystem == UnitSystem.Metric ? Measures.MetersPerKilometer : Measures.MetersPerMile;
      var distance = TotalDistance - distanceFactor * Splits.Length;
      RemainingDistance = new(DistanceTypes.Meters, time, distance, splitReadings);
    }

    TotalTime = readings.Length / 60;
  }

  int AddSplit(int splitReadings) {
    var distanceFactor = UnitSystem == UnitSystem.Metric ? Measures.MetersPerKilometer : Measures.MetersPerMile;
    var distanceType   = UnitSystem == UnitSystem.Metric ? DistanceTypes.Kilometer :DistanceTypes.Mile;
    int splitCount = Splits.Length + 1;
    double dist = distanceFactor * splitCount;
    if (splitReadings > 20 && TotalDistance >= dist && TotalDistance < dist + 15) {
      var time = splitReadings / 60;
      Splits.Add(new DistancePerformance(distanceType, time, 1, splitReadings));
      splitReadings = 0;
    }
    return splitReadings;
  }
}
//=================================================================================

class RawWorkoutsClass {
  readonly var ListClass<RawWorkoutClass>  Workouts;

  Constructor {
    var fileCount = Files.Length;
    Workouts = new(fileCount);
    ProgressComment("Processing " fileCount " GPX Files.");
    foreach (var file in Files) {
      RawWorkoutClass workout = new;
      workout.Build(file);
      Workouts.Add(workout);
      ProgressPercent(each1, fileCount);
    }
  }
}
