using Units;

enum DistanceTypes {
  Meters,
  Kilometer,
  Mile
}

//class DistancePerformance {
//  var DistanceTypes Type;
//  var double Time;
//  Constructor(DistanceTypes type, double time) {
//    Type = type;
//    Time = time;
//  }
//}

class DistancePerformance {
  var DistanceTypes Type;
  var double        Time,
                    Distance;
  var int           Readings;
  Constructor(DistanceTypes type, double time, double distance, int readings) {
    Type     = type;
    Time     = time;
    Distance = distance;
    Readings = readings;
  }
}
//=================================================================================
class RawWorkoutClass: WorkoutBase {
  var ListClass<DistancePerformance> KilometerSplits,
                                     MileSplits;
  var DistancePerformance            RemainingDistance;
  var double                         TotalDistance,
                                     TotalTime;
  var string s = "";

  Constructor {
    super.Constructor;
    KilometerSplits   = new;
    MileSplits        = new;
    RemainingDistance = new;
    TotalDistance     = 0;
    TotalTime         = 0;
  }

  double GetTotalMiles {
    return TotalDistance meters intu miles;
  }

  double GetTotalKilometers {
    return TotalDistance meters intu kilometers;
  }

  double GetRemainingMiles {
    return RemainingDistance meters intu miles;
  }

  double GetRemainingKilometers {
    return RemainingDistance meters intu kilometers;
  }
}
//=================================================================================

class RawWorkoutsClass {
  var ListClass<AccumulatorClass>    AccumulatedWorkouts;
  var ListClass<RawWorkoutClass>     RawWorkouts;
  var double                         KilometerDistance,
                                     MileDistance;

  Constructor {
    AccumulatedWorkouts = new(Files.Length);
    RawWorkouts         = new(Files.Length);
    KilometerDistance   = 1 kilometer intu meters;
    MileDistance        = 1 mile intu meters;
  }

  void Build {
    foreach (var file in Files) {
      AccumulatorClass accumulator = new;
      accumulator.ReadFile(DataPath, file.FileName, false);
      AccumulatedWorkouts.Add(accumulator);
    }
  }

  private void BuildWorkouts {
    foreach (var accumulatedWorkout in AccumulatedWorkouts) {
      RawWorkoutClass workout = new;
      var readings = accumulatedWorkout.Readings;
      if (readings.Length > 0) {
        workout.StartTime = readings.FirstElement.Time;
        workout.EndTime   = readings.LastElement.Time;
      }

      int i = 0;
      int kiloReadings = 0;
      int mileReadings = 0;
      while (i < readings.Length) {
        workout.TotalDistance += readings[i++].Meters;
        kiloReadings++;
        mileReadings++;

        int kSplitCount = workout.KilometerSplits.Length + 1;
        double kiloDist = KilometerDistance * kSplitCount;
        if (kiloReadings > 20 && workout.TotalDistance >= kiloDist && workout.TotalDistance < kiloDist + 15 meters) {
          var time = kiloReadings / 60;
          workout.KilometerSplits.Add(new DistancePerformance(DistanceTypes.Kilometer, time, 1, kiloReadings));
          kiloReadings = 0;
        }

        int mSplitCount = workout.MileSplits.Length + 1;
        int mileDist = MileDistance * mSplitCount;
        if (mileReadings > 20 && workout.TotalDistance >= mileDist && workout.TotalDistance < mileDist + 15 meters) {
          var time = mileReadings / 60;
          workout.MileSplits.Add(new DistancePerformance(DistanceTypes.Kilometer, time, 1, kiloReadings));
          mileReadings = 0;
        }
      }

      if (kiloReadings > 0) {
        var time = kiloReadings / 60;
        var distance = workout.TotalDistance - KilometerDistance * workout.KilometerSplits.Length;
        workout.RemainingDistance = new(DistanceTypes.Meters, time, distance, kiloReadings);
      }

      workout.TotalTime = readings.Length / 60;
      RawWorkouts.Add(workout);
    }
  }
}
